{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import Combo from'./components/combo';import data from'./json/data.json';import getEvolutions from'./functions/getEvolutions';import ProfileGroup from'./components/profileGroup';import Profile from'./components/profile';import Revolution from'./components/revolution';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function App(){const[selectedType,setSelectedType]=useState(\"진화 상태\");const[types,setTypes]=useState([\"유년기1\",\"유년기2\",\"성장기\",\"성숙기\",\"완전체\"]);const[all,setAll]=useState(data);const[filtered,setFiltered]=useState([]);const[selectedDigimon,setSelectedDigimon]=useState({from:\"\"});// useEffect(() => {\n//     console.log(selectedDigimon);\n// }, [selectedDigimon]);\nconst selectDigimon=digimon=>{getEvolutions(digimon);setSelectedDigimon(digimon);// verticalLeftLength();\n// adjust();\n};const changeType=type=>{setSelectedType(type);setSelectedDigimon({from:\"디지몬 선택\"});const temp=new Array();let prev=\"\";for(const each of all){if(each.from===prev)continue;if(each.type!==type)continue;prev=each.from;temp.push(each);}setFiltered(temp);};// const verticalHeightLeft = { height: `calc(var(--profile-height) * ${selectedDigimon?.down?.length - 1})` };\n// const verticalHeightLeft = useRef({});\n// const verticalLeftLength = () => {\n//     const map = selectedDigimon?.down?.flatMap(each => each?.down);\n//     let topPadding = 0;\n//     let bottomPadding = 0;\n//     let length = 0;\n//     for(let i = 0; i < map.down?.length; i++) {\n//         const each = map.down[i];\n//         console.log(\"each\", each);\n//         const row = each?.down?.length * 89 ?? 0;\n//         length += row;\n//         if(i === 0) topPadding = Math.floor(length / 2);\n//         if(i === map.down?.length - 1) bottomPadding = Math.floor(row / 2);\n//     }\n//     // console.log(selectedDigimon?.down?.flatMap(each => each?.down));\n//     verticalHeightLeft.current = {\n//         top: `${topPadding}px`,\n//         height: `${length}px`\n//     };\n//     // setLeft({\n//     //     top: `${topPadding}px`,\n//     //     height: `${length}px`\n//     // })\n// }\nreturn/*#__PURE__*/_jsxs(\"div\",{id:\"container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"header\",children:\"header bar & logo\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"main\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title-message\",children:\"\\uC9C4\\uD654 \\uC0C1\\uD0DC\\uC5D0 \\uB9DE\\uB294 \\uB514\\uC9C0\\uBAAC\\uC744 \\uC120\\uD0DD\\uD558\\uC138\\uC694.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"filters\",children:[/*#__PURE__*/_jsx(Combo,{list:types,selected:selectedType,select:changeType,selectedType:selectedType}),/*#__PURE__*/_jsx(Combo,{list:filtered,selected:selectedDigimon.from,select:current=>selectDigimon(current),selectedType:selectedType})]}),/*#__PURE__*/_jsx(Revolution,{selectedDigimon:selectedDigimon})]}),/*#__PURE__*/_jsx(\"div\",{className:\"footer\",children:\"\\uD478\\uD130\"})]});}","map":{"version":3,"names":["React","useEffect","useRef","useState","Combo","data","getEvolutions","ProfileGroup","Profile","Revolution","jsx","_jsx","jsxs","_jsxs","App","selectedType","setSelectedType","types","setTypes","all","setAll","filtered","setFiltered","selectedDigimon","setSelectedDigimon","from","selectDigimon","digimon","changeType","type","temp","Array","prev","each","push","id","children","className","list","selected","select","current"],"sources":["C:/Users/JunYeong/Desktop/workspace/dsr_wiki/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport Combo from './components/combo';\r\nimport data from './json/data.json';\r\nimport getEvolutions from './functions/getEvolutions';\r\nimport ProfileGroup from './components/profileGroup';\r\nimport Profile from './components/profile';\r\nimport Revolution from './components/revolution';\r\n\r\nexport default function App() {\r\n    const [selectedType, setSelectedType] = useState(\"진화 상태\");\r\n    const [types, setTypes] = useState([\"유년기1\", \"유년기2\", \"성장기\", \"성숙기\", \"완전체\"]);\r\n    const [all, setAll] = useState(data);\r\n    const [filtered, setFiltered] = useState([]);\r\n    const [selectedDigimon, setSelectedDigimon] = useState({ from: \"\" });\r\n\r\n    // useEffect(() => {\r\n        \r\n    //     console.log(selectedDigimon);\r\n    // }, [selectedDigimon]);\r\n\r\n    const selectDigimon = (digimon) => {\r\n        getEvolutions(digimon);\r\n        setSelectedDigimon(digimon);\r\n        // verticalLeftLength();\r\n        // adjust();\r\n    }\r\n\r\n    const changeType = (type) => {\r\n        setSelectedType(type);\r\n        setSelectedDigimon({ from: \"디지몬 선택\"});\r\n        const temp = new Array();\r\n        let prev = \"\";\r\n        for(const each of all) {\r\n            if(each.from === prev) continue;\r\n            if(each.type !== type) continue;\r\n\r\n            prev = each.from;\r\n            temp.push(each);\r\n        }\r\n        setFiltered(temp);\r\n    }\r\n\r\n    // const verticalHeightLeft = { height: `calc(var(--profile-height) * ${selectedDigimon?.down?.length - 1})` };\r\n    // const verticalHeightLeft = useRef({});\r\n    // const verticalLeftLength = () => {\r\n    //     const map = selectedDigimon?.down?.flatMap(each => each?.down);\r\n    //     let topPadding = 0;\r\n    //     let bottomPadding = 0;\r\n    //     let length = 0;\r\n    //     for(let i = 0; i < map.down?.length; i++) {\r\n    //         const each = map.down[i];\r\n    //         console.log(\"each\", each);\r\n    //         const row = each?.down?.length * 89 ?? 0;\r\n    //         length += row;\r\n    //         if(i === 0) topPadding = Math.floor(length / 2);\r\n    //         if(i === map.down?.length - 1) bottomPadding = Math.floor(row / 2);\r\n    //     }\r\n    //     // console.log(selectedDigimon?.down?.flatMap(each => each?.down));\r\n    //     verticalHeightLeft.current = {\r\n    //         top: `${topPadding}px`,\r\n    //         height: `${length}px`\r\n    //     };\r\n    //     // setLeft({\r\n    //     //     top: `${topPadding}px`,\r\n    //     //     height: `${length}px`\r\n    //     // })\r\n    // }\r\n\r\n    return (\r\n        <div id=\"container\">\r\n            <div className=\"header\">header bar & logo</div>\r\n            {/* 진화 상태와 그에 맞는 디지몬 선택자 */}\r\n            <div className='main'>\r\n                <h1 className=\"title-message\">진화 상태에 맞는 디지몬을 선택하세요.</h1>\r\n                <div className=\"filters\">\r\n                    <Combo list={types} selected={selectedType} select={changeType} selectedType={selectedType}></Combo>\r\n                    <Combo list={filtered} selected={selectedDigimon.from} select={(current) => selectDigimon(current)}  selectedType={selectedType}></Combo>\r\n                </div>\r\n                <Revolution selectedDigimon={selectedDigimon}></Revolution>\r\n            </div>\r\n            <div className=\"footer\">푸터</div>\r\n        </div>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}