{"ast":null,"code":"import React from\"react\";import Profile from\"./profile\";import ProfileLine from\"./profileLine\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ProfileGroup(_ref){let{digimons,direction}=_ref;const flexRowAndAlignEnd={flexDirection:\"row\",alignSelf:\"flex-end\"};const flexRowAndAlignStart={flexDirection:\"row\",alignSelf:\"flex-start\"};const flexRow={flexDirection:\"row\"};const flexColumn={flexDirection:\"column\"};if(direction===\"right\"){// digimons의 요소가 1개인 경우\nif((digimons===null||digimons===void 0?void 0:digimons.length)===1){// digimons.down이 존재하는 경우 -> profileGroup\nif(digimons[0].down!==undefined&&digimons[0].down!==null){// console.log(\"digimons1\", digimons)\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"profile-group\",style:flexRow,children:[/*#__PURE__*/_jsx(ProfileGroup,{digimons:digimons[0].down,direction:direction}),/*#__PURE__*/_jsx(ProfileLine,{digimon:digimons[0],direction:direction}),/*#__PURE__*/_jsx(Profile,{digimon:digimons[0]})]});}else{// digimons.down이 존재하지 않는 경우 -> profile\n// console.log(\"digimons2\", digimons)\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"profile-group\",style:flexRow,children:/*#__PURE__*/_jsx(Profile,{digimon:digimons[0]})});}// digimons의 요소가 복수인 경우\n}else if((digimons===null||digimons===void 0?void 0:digimons.length)>1){return/*#__PURE__*/_jsx(\"div\",{className:\"profile-group\",style:flexColumn,children:digimons.map(digimon=>{if(digimon.down===undefined||digimon.down===null){if(digimon.type===\"유년기1\"||digimon.type===\"유년기2\")return/*#__PURE__*/_jsx(Profile,{digimon:digimon,align:\"end\"});else console.log(\"digimons3 - only profile\",direction,digimons);return/*#__PURE__*/_jsxs(\"div\",{className:\"profile-group\",children:[/*#__PURE__*/_jsx(ProfileLine,{digimon:digimon,direction:direction}),/*#__PURE__*/_jsx(Profile,{digimon:digimon,align:\"end\"})]});}else if(direction===\"right\"){// console.log(\"digimons4 - group line profile\", digimons)\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"profile-group\",style:flexRowAndAlignEnd,children:[/*#__PURE__*/_jsx(ProfileGroup,{digimons:digimon.down,direction:direction}),/*#__PURE__*/_jsx(ProfileLine,{digimon:digimon,direction:direction}),/*#__PURE__*/_jsx(Profile,{digimon:digimon})]});}else{// console.log(\"digimons5 - only group\", digimons)\nreturn/*#__PURE__*/_jsx(ProfileGroup,{digimons:digimon.down,direction:direction});}})});}}else{// digimons의 요소가 1개인 경우\nif((digimons===null||digimons===void 0?void 0:digimons.length)===1){// digimons.down이 존재하는 경우 -> profileGroup\nif(digimons[0].up!==undefined&&digimons[0].up!==null){// console.log(\"digimons1\", digimons)\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"profile-group\",style:flexRow,children:[/*#__PURE__*/_jsx(Profile,{digimon:digimons[0]}),/*#__PURE__*/_jsx(ProfileLine,{digimon:digimons[0],direction:direction}),/*#__PURE__*/_jsx(ProfileGroup,{digimons:digimons[0].up,direction:direction})]});}else{// digimons.down이 존재하지 않는 경우 -> profile\n// console.log(\"digimons2\", digimons)\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"profile-group\",style:flexRow,children:/*#__PURE__*/_jsx(Profile,{digimon:digimons[0]})});}// digimons의 요소가 복수인 경우\n}else if((digimons===null||digimons===void 0?void 0:digimons.length)>1){return/*#__PURE__*/_jsx(\"div\",{className:\"profile-group\",style:flexColumn,children:digimons.map(digimon=>{if(digimon.up===undefined||digimon.up===null){if(digimon.type===\"궁극체\"||digimon.type===\"완전체\")return/*#__PURE__*/_jsx(Profile,{digimon:digimon,align:\"start\"});else console.log(\"digimons3 - only profile\",direction,digimons);return/*#__PURE__*/_jsx(\"div\",{className:\"profile-group\",style:flexRowAndAlignStart,children:/*#__PURE__*/_jsx(Profile,{digimon:digimon,align:\"start\"})});}else// if(direction === \"right\") \n{// console.log(\"digimons4 - group line profile\", digimons)\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"profile-group\",style:flexRowAndAlignStart,children:[/*#__PURE__*/_jsx(Profile,{digimon:digimon}),/*#__PURE__*/_jsx(ProfileLine,{digimon:digimon,direction:direction}),/*#__PURE__*/_jsx(ProfileGroup,{digimons:digimon.up,direction:direction})]});}//  else {\n//     // console.log(\"digimons5 - only group\", digimons)\n//     return (<ProfileGroup digimons={digimon.up} direction={direction}></ProfileGroup>);\n// }\n})});}}}","map":{"version":3,"names":["React","Profile","ProfileLine","jsx","_jsx","jsxs","_jsxs","ProfileGroup","_ref","digimons","direction","flexRowAndAlignEnd","flexDirection","alignSelf","flexRowAndAlignStart","flexRow","flexColumn","length","down","undefined","className","style","children","digimon","map","type","align","console","log","up"],"sources":["C:/Users/JunYeong/Desktop/workspace/dsr_wiki/src/components/profileGroup.js"],"sourcesContent":["import React from \"react\";\r\nimport Profile from \"./profile\";\r\nimport ProfileLine from \"./profileLine\";\r\n\r\nexport default function ProfileGroup({ digimons, direction }) {\r\n    const flexRowAndAlignEnd = {flexDirection: \"row\", alignSelf: \"flex-end\"};\r\n    const flexRowAndAlignStart = {flexDirection: \"row\", alignSelf: \"flex-start\"};\r\n    const flexRow = {flexDirection: \"row\"};\r\n    const flexColumn = {flexDirection: \"column\"};\r\n\r\n    if(direction === \"right\") {\r\n        // digimons의 요소가 1개인 경우\r\n        if(digimons?.length === 1) {\r\n            // digimons.down이 존재하는 경우 -> profileGroup\r\n            if(digimons[0].down !== undefined && digimons[0].down !== null) {\r\n                // console.log(\"digimons1\", digimons)\r\n                return (<div className=\"profile-group\" style={flexRow}>\r\n                            <ProfileGroup digimons={digimons[0].down} direction={direction}></ProfileGroup>\r\n                            <ProfileLine digimon={digimons[0]} direction={direction}></ProfileLine>\r\n                            <Profile digimon={digimons[0]} ></Profile>\r\n                        </div>);\r\n            } else {\r\n                // digimons.down이 존재하지 않는 경우 -> profile\r\n                // console.log(\"digimons2\", digimons)\r\n                return (<div className=\"profile-group\" style={flexRow}>\r\n                            <Profile digimon={digimons[0]} ></Profile>\r\n                        </div>);\r\n            }\r\n        // digimons의 요소가 복수인 경우\r\n        } else if(digimons?.length > 1) {\r\n            return (\r\n                <div className=\"profile-group\" style={flexColumn} >\r\n                    { digimons.map(digimon => {\r\n                        if(digimon.down === undefined || digimon.down === null) {\r\n                            if(digimon.type === \"유년기1\" || digimon.type === \"유년기2\")\r\n                                return <Profile digimon={digimon} align={\"end\"}></Profile>;\r\n                            else\r\n                                console.log(\"digimons3 - only profile\", direction, digimons)\r\n                                return (<div className=\"profile-group\">\r\n                                    <ProfileLine digimon={digimon} direction={direction}></ProfileLine>\r\n                                    <Profile digimon={digimon} align={\"end\"}></Profile>\r\n                                </div>);\r\n                        } else if(direction === \"right\") {\r\n                            // console.log(\"digimons4 - group line profile\", digimons)\r\n                            return (<div className=\"profile-group\" style={flexRowAndAlignEnd}>\r\n                                        <ProfileGroup digimons={digimon.down} direction={direction}></ProfileGroup>\r\n                                        <ProfileLine digimon={digimon} direction={direction}></ProfileLine>\r\n                                        <Profile digimon={digimon}></Profile>\r\n                                    </div>);\r\n                        } else {\r\n                            // console.log(\"digimons5 - only group\", digimons)\r\n                            return (<ProfileGroup digimons={digimon.down} direction={direction}></ProfileGroup>);\r\n                        }\r\n                    })}\r\n                </div>\r\n            );\r\n        }\r\n    } else {\r\n        // digimons의 요소가 1개인 경우\r\n        if(digimons?.length === 1) {\r\n            // digimons.down이 존재하는 경우 -> profileGroup\r\n            if(digimons[0].up !== undefined && digimons[0].up !== null) {\r\n                // console.log(\"digimons1\", digimons)\r\n                return (<div className=\"profile-group\" style={flexRow}>\r\n                            <Profile digimon={digimons[0]} ></Profile>\r\n                            <ProfileLine digimon={digimons[0]} direction={direction}></ProfileLine>\r\n                            <ProfileGroup digimons={digimons[0].up} direction={direction}></ProfileGroup>\r\n                        </div>);\r\n            } else {\r\n                // digimons.down이 존재하지 않는 경우 -> profile\r\n                // console.log(\"digimons2\", digimons)\r\n                return (<div className=\"profile-group\" style={flexRow}>\r\n                            <Profile digimon={digimons[0]} ></Profile>\r\n                        </div>);\r\n            }\r\n        // digimons의 요소가 복수인 경우\r\n        } else if(digimons?.length > 1) {\r\n            return (\r\n                <div className=\"profile-group\" style={flexColumn} >\r\n                    { digimons.map(digimon => {\r\n                        if(digimon.up === undefined || digimon.up === null) {\r\n                            if(digimon.type === \"궁극체\" || digimon.type === \"완전체\")\r\n                                return <Profile digimon={digimon} align={\"start\"}></Profile>;\r\n                            else\r\n                                console.log(\"digimons3 - only profile\", direction, digimons)\r\n                                return (<div className=\"profile-group\" style={flexRowAndAlignStart}>\r\n                                    {/* <ProfileLine digimon={digimon} direction={direction}></ProfileLine> */}\r\n                                    <Profile digimon={digimon} align={\"start\"}></Profile>\r\n                                </div>);\r\n                        } else \r\n                        // if(direction === \"right\") \r\n                        {\r\n                            // console.log(\"digimons4 - group line profile\", digimons)\r\n                            return (<div className=\"profile-group\" style={flexRowAndAlignStart}>\r\n                                        <Profile digimon={digimon}></Profile>\r\n                                        <ProfileLine digimon={digimon} direction={direction}></ProfileLine>\r\n                                        <ProfileGroup digimons={digimon.up} direction={direction}></ProfileGroup>\r\n                                    </div>);\r\n                        }\r\n                        //  else {\r\n                        //     // console.log(\"digimons5 - only group\", digimons)\r\n                        //     return (<ProfileGroup digimons={digimon.up} direction={direction}></ProfileGroup>);\r\n                        // }\r\n                    })}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}