{"ast":null,"code":"import data from '../json/data.json';\nconst getTypeProgression = type => {\n  if (type === \"유년기1\") return 1;\n  if (type === \"유년기2\") return 2;\n  if (type === \"성장기\") return 3;\n  if (type === \"성숙기\") return 4;\n  if (type === \"완전체\") return 5;\n  return 0;\n};\nconst getTypeNameByProgression = progression => {\n  if (progression === 1) return \"유년기1\";\n  if (progression === 2) return \"유년기2\";\n  if (progression === 3) return \"성장기\";\n  if (progression === 4) return \"성숙기\";\n  if (progression === 5) return \"완전체\";\n  if (progression === 6) return \"궁극체\";\n  return 0;\n};\nconst temp = [];\nconst clearTempArray = () => {\n  for (let i = 0; i < temp.length; i++) {\n    temp.pop();\n  }\n};\nconst getDownEvolutions = (all, standard, selected) => {\n  const evolution = new Array();\n  for (let i = standard; i > 1; i--) {\n    const typeName = getTypeNameByProgression(i - 1);\n    all.filter(each => each.type === typeName && each.to === selected.from).forEach(each => {\n      let sub = null;\n      // if (temp.findIndex((t) => t.from === each.from) === -1) {\n      sub = getDownEvolutions(all, standard - 1, each);\n      if (sub !== undefined && sub !== null) {\n        temp.push(...sub);\n      }\n      each[\"down\"] = sub;\n      evolution.push(each);\n      // }\n    });\n  }\n\n  return evolution.length > 0 ? evolution : null;\n};\n\n// const getUpEvolutions = (all, standard, selected) => {\n//   const evolution = new Array();\n\n//   for (let i = standard; i < 6; i++) {\n//     const typeName = getTypeNameByProgression(i);\n//     console.log(typeName, \"찾는중..\")\n//     all\n//       .filter((each) => each.type === typeName && each.from === selected.from)\n//       .forEach((each) => {\n//         console.log(typeName, \"each\", each)\n//         // each.from = each.to\n//         if(each.type === \"완전체\")\n//           each.type = \"궁극체\";\n//         let sup = null;\n//         // if (temp.findIndex((t) => t?.from === each.from) === -1) {\n//           sup = getUpEvolutions(all, standard + 1, each.to);\n//           console.log(typeName, sup)\n//           if (sup !== null && sup !== undefined) temp.push(...sup);\n//         // }\n\n//         each[\"up\"] = sup;\n//         evolution.push(each);\n//       });\n\n//     return evolution.length > 0 ? evolution : null;\n//   }\n// };\n\nconst getUpEvolutions = (all, standard, selected) => {\n  const evolution = new Array();\n  for (let i = standard; i < 6; i++) {\n    const typeName = getTypeNameByProgression(i);\n    const tos = all.filter(each => each.type === typeName && each.from === selected.from);\n    return evolution.length > 0 ? evolution : null;\n  }\n};\nconst deepCopyAll = () => {\n  const all = new Array();\n  for (const each of data) {\n    all.push(Object.assign({}, each));\n  }\n  return all;\n};\nconst getEvolutions = selected => {\n  const standard = getTypeProgression(selected.type);\n  const all = deepCopyAll(data);\n  selected[\"down\"] = [];\n  selected[\"down\"] = getDownEvolutions(all, standard, selected);\n  clearTempArray();\n  selected[\"up\"] = [];\n  selected[\"up\"] = getUpEvolutions(all, standard, selected);\n  clearTempArray();\n};\nexport default getEvolutions;","map":{"version":3,"names":["data","getTypeProgression","type","getTypeNameByProgression","progression","temp","clearTempArray","i","length","pop","getDownEvolutions","all","standard","selected","evolution","Array","typeName","filter","each","to","from","forEach","sub","undefined","push","getUpEvolutions","tos","deepCopyAll","Object","assign","getEvolutions"],"sources":["C:/Users/JunYeong/Desktop/workspace/dsr_wiki/src/functions/getEvolutions.js"],"sourcesContent":["import data from '../json/data.json';\r\n\r\nconst getTypeProgression = (type) => {\r\n  if (type === \"유년기1\") return 1;\r\n  if (type === \"유년기2\") return 2;\r\n  if (type === \"성장기\") return 3;\r\n  if (type === \"성숙기\") return 4;\r\n  if (type === \"완전체\") return 5;\r\n\r\n  return 0;\r\n};\r\n\r\nconst getTypeNameByProgression = (progression) => {\r\n  if (progression === 1) return \"유년기1\";\r\n  if (progression === 2) return \"유년기2\";\r\n  if (progression === 3) return \"성장기\";\r\n  if (progression === 4) return \"성숙기\";\r\n  if (progression === 5) return \"완전체\";\r\n  if (progression === 6) return \"궁극체\";\r\n\r\n  return 0;\r\n};\r\n\r\nconst temp = [];\r\nconst clearTempArray = () => {\r\n  for (let i = 0; i < temp.length; i++) {\r\n    temp.pop();\r\n  }\r\n};\r\n\r\nconst getDownEvolutions = (all, standard, selected) => {\r\n  const evolution = new Array();\r\n\r\n  for (let i = standard; i > 1; i--) {\r\n    const typeName = getTypeNameByProgression(i - 1);\r\n\r\n    all\r\n      .filter((each) => each.type === typeName && each.to === selected.from)\r\n      .forEach((each) => {\r\n        let sub = null;\r\n        // if (temp.findIndex((t) => t.from === each.from) === -1) {\r\n          sub = getDownEvolutions(all, standard - 1, each);\r\n          if (sub !== undefined && sub !== null) {\r\n            temp.push(...sub);\r\n          }\r\n          each[\"down\"] = sub;\r\n          evolution.push(each);\r\n        // }\r\n      });\r\n  }\r\n  return evolution.length > 0 ? evolution : null;\r\n};\r\n\r\n// const getUpEvolutions = (all, standard, selected) => {\r\n//   const evolution = new Array();\r\n\r\n//   for (let i = standard; i < 6; i++) {\r\n//     const typeName = getTypeNameByProgression(i);\r\n//     console.log(typeName, \"찾는중..\")\r\n//     all\r\n//       .filter((each) => each.type === typeName && each.from === selected.from)\r\n//       .forEach((each) => {\r\n//         console.log(typeName, \"each\", each)\r\n//         // each.from = each.to\r\n//         if(each.type === \"완전체\")\r\n//           each.type = \"궁극체\";\r\n//         let sup = null;\r\n//         // if (temp.findIndex((t) => t?.from === each.from) === -1) {\r\n//           sup = getUpEvolutions(all, standard + 1, each.to);\r\n//           console.log(typeName, sup)\r\n//           if (sup !== null && sup !== undefined) temp.push(...sup);\r\n//         // }\r\n\r\n//         each[\"up\"] = sup;\r\n//         evolution.push(each);\r\n//       });\r\n\r\n//     return evolution.length > 0 ? evolution : null;\r\n//   }\r\n// };\r\n\r\nconst getUpEvolutions = (all, standard, selected) => {\r\n  const evolution = new Array();\r\n\r\n  for (let i = standard; i < 6; i++) {\r\n    const typeName = getTypeNameByProgression(i);\r\n\r\n    const tos = all.filter(each => each.type === typeName && each.from === selected.from);\r\n    \r\n\r\n\r\n    return evolution.length > 0 ? evolution : null;\r\n  }\r\n};\r\n\r\nconst deepCopyAll = () => {\r\n    const all = new Array();\r\n    for(const each of data) {\r\n        all.push(Object.assign({}, each));\r\n    }\r\n\r\n    return all;\r\n}\r\n\r\nconst getEvolutions = (selected) => {\r\n  const standard = getTypeProgression(selected.type);\r\n\r\n  const all = deepCopyAll(data);\r\n\r\n  selected[\"down\"] = [];\r\n  selected[\"down\"] = getDownEvolutions(all, standard, selected);\r\n  clearTempArray();\r\n\r\n  selected[\"up\"] = [];\r\n  selected[\"up\"] = getUpEvolutions(all, standard, selected);\r\n  clearTempArray();\r\n};\r\n\r\nexport default getEvolutions;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}