{"ast":null,"code":"import data from\"../json/data.json\";const getTypeProgression=type=>{if(type===\"유년기1\")return 1;if(type===\"유년기2\")return 2;if(type===\"성장기\")return 3;if(type===\"성숙기\")return 4;if(type===\"완전체\")return 5;if(type===\"궁극체\")return 6;return 0;};const getTypeNameByProgression=progression=>{if(progression===1)return\"유년기1\";if(progression===2)return\"유년기2\";if(progression===3)return\"성장기\";if(progression===4)return\"성숙기\";if(progression===5)return\"완전체\";if(progression===6)return\"궁극체\";return 0;};const temp=[];const clearTempArray=()=>{for(let i=0;i<temp.length;i++){temp.pop();}};const getDownEvolutions=(all,standard,selected)=>{const evolution=new Array();for(let i=standard;i>1;i--){const typeName=getTypeNameByProgression(i-1);all.filter(each=>each.type===typeName&&each.to===selected.from).forEach(each=>{let sub=null;// if (temp.findIndex((t) => t.from === each.from) === -1) {\nsub=getDownEvolutions(all,standard-1,each);if(sub!==undefined&&sub!==null){temp.push(...sub);}each[\"down\"]=sub;evolution.push(each);// }\n});}return evolution.length>0?evolution:null;};// const getUpEvolutions = (all, standard, selected) => {\n//   const evolution = new Array();\n//   for (let i = standard; i < 6; i++) {\n//     const typeName = getTypeNameByProgression(i);\n//     console.log(typeName, \"찾는중..\")\n//     all\n//       .filter((each) => each.type === typeName && each.from === selected.from)\n//       .forEach((each) => {\n//         console.log(typeName, \"each\", each)\n//         // each.from = each.to\n//         if(each.type === \"완전체\")\n//           each.type = \"궁극체\";\n//         let sup = null;\n//         // if (temp.findIndex((t) => t?.from === each.from) === -1) {\n//           sup = getUpEvolutions(all, standard + 1, each.to);\n//           console.log(typeName, sup)\n//           if (sup !== null && sup !== undefined) temp.push(...sup);\n//         // }\n//         each[\"up\"] = sup;\n//         evolution.push(each);\n//       });\n//     return evolution.length > 0 ? evolution : null;\n//   }\n// };\nconst getUpEvolutions=(all,standard,selected)=>{const typeName=getTypeNameByProgression(standard);console.log(\"selected\",selected);const evolution=new Array();const froms=all.filter(each=>each.type===typeName&&each.from===selected.from);froms.forEach(each=>{let to=all.find(e=>e.from===each.to);if(to!==undefined&&to!==null){to=Object.assign({},to);to.percentage=each.percentage;evolution.push(to);}else// if((each.type === \"성숙기\" || each.type === \"완전체\") && each.to !== \"\")\n{const nextType=getTypeNameByProgression(getTypeProgression(each.type)+1);evolution.push({from:each.to,type:nextType,method:each.method,to:\"\",percentage:each.percentage,ingredient:each.ingredient,level:each.length,bonding:0,str:0,int:0,spd:0,res:0,def:0,with:\"\"});}});console.log(\"evolution\",evolution);if(evolution.length>0){// evolution.push(...sup);\nselected[\"up\"]=evolution;evolution.forEach(each=>{getUpEvolutions(all,standard+1,each);});}};const deepCopyAll=()=>{const all=new Array();for(const each of data){all.push(Object.assign({},each));}return all;};const getEvolutions=selected=>{const standard=getTypeProgression(selected.type);const all=deepCopyAll(data);selected[\"down\"]=[];selected[\"down\"]=getDownEvolutions(all,standard,selected);clearTempArray();selected[\"up\"]=[];// selected[\"up\"] = \ngetUpEvolutions(all,standard,selected);clearTempArray();};export default getEvolutions;","map":{"version":3,"names":["data","getTypeProgression","type","getTypeNameByProgression","progression","temp","clearTempArray","i","length","pop","getDownEvolutions","all","standard","selected","evolution","Array","typeName","filter","each","to","from","forEach","sub","undefined","push","getUpEvolutions","console","log","froms","find","e","Object","assign","percentage","nextType","method","ingredient","level","bonding","str","int","spd","res","def","with","deepCopyAll","getEvolutions"],"sources":["C:/Users/JunYeong/Desktop/workspace/dsr_wiki/src/functions/getEvolutions.js"],"sourcesContent":["import data from \"../json/data.json\";\r\n\r\nconst getTypeProgression = (type) => {\r\n  if (type === \"유년기1\") return 1;\r\n  if (type === \"유년기2\") return 2;\r\n  if (type === \"성장기\") return 3;\r\n  if (type === \"성숙기\") return 4;\r\n  if (type === \"완전체\") return 5;\r\n  if (type === \"궁극체\") return 6;\r\n\r\n  return 0;\r\n};\r\n\r\nconst getTypeNameByProgression = (progression) => {\r\n  if (progression === 1) return \"유년기1\";\r\n  if (progression === 2) return \"유년기2\";\r\n  if (progression === 3) return \"성장기\";\r\n  if (progression === 4) return \"성숙기\";\r\n  if (progression === 5) return \"완전체\";\r\n  if (progression === 6) return \"궁극체\";\r\n\r\n  return 0;\r\n};\r\n\r\nconst temp = [];\r\nconst clearTempArray = () => {\r\n  for (let i = 0; i < temp.length; i++) {\r\n    temp.pop();\r\n  }\r\n};\r\n\r\nconst getDownEvolutions = (all, standard, selected) => {\r\n  const evolution = new Array();\r\n\r\n  for (let i = standard; i > 1; i--) {\r\n    const typeName = getTypeNameByProgression(i - 1);\r\n\r\n    all\r\n      .filter((each) => each.type === typeName && each.to === selected.from)\r\n      .forEach((each) => {\r\n        let sub = null;\r\n        // if (temp.findIndex((t) => t.from === each.from) === -1) {\r\n        sub = getDownEvolutions(all, standard - 1, each);\r\n        if (sub !== undefined && sub !== null) {\r\n          temp.push(...sub);\r\n        }\r\n        each[\"down\"] = sub;\r\n        evolution.push(each);\r\n        // }\r\n      });\r\n  }\r\n  return evolution.length > 0 ? evolution : null;\r\n};\r\n\r\n// const getUpEvolutions = (all, standard, selected) => {\r\n//   const evolution = new Array();\r\n\r\n//   for (let i = standard; i < 6; i++) {\r\n//     const typeName = getTypeNameByProgression(i);\r\n//     console.log(typeName, \"찾는중..\")\r\n//     all\r\n//       .filter((each) => each.type === typeName && each.from === selected.from)\r\n//       .forEach((each) => {\r\n//         console.log(typeName, \"each\", each)\r\n//         // each.from = each.to\r\n//         if(each.type === \"완전체\")\r\n//           each.type = \"궁극체\";\r\n//         let sup = null;\r\n//         // if (temp.findIndex((t) => t?.from === each.from) === -1) {\r\n//           sup = getUpEvolutions(all, standard + 1, each.to);\r\n//           console.log(typeName, sup)\r\n//           if (sup !== null && sup !== undefined) temp.push(...sup);\r\n//         // }\r\n\r\n//         each[\"up\"] = sup;\r\n//         evolution.push(each);\r\n//       });\r\n\r\n//     return evolution.length > 0 ? evolution : null;\r\n//   }\r\n// };\r\n\r\nconst getUpEvolutions = (all, standard, selected) => {\r\n  const typeName = getTypeNameByProgression(standard);\r\n  \r\n  console.log(\"selected\", selected);\r\n  const evolution = new Array();\r\n  const froms = all.filter((each) => each.type === typeName && each.from === selected.from);\r\n  froms.forEach((each) => {\r\n    let to = all.find((e) => e.from === each.to);\r\n\r\n    if(to !== undefined && to !== null) {\r\n      to = Object.assign({}, to);\r\n      to.percentage = each.percentage;\r\n      evolution.push(to);\r\n    } else \r\n    // if((each.type === \"성숙기\" || each.type === \"완전체\") && each.to !== \"\")\r\n    {\r\n      const nextType = getTypeNameByProgression(getTypeProgression(each.type) + 1);\r\n\r\n      evolution.push({\r\n        from: each.to,\r\n        type: nextType,\r\n        method: each.method,\r\n        to: \"\",\r\n        percentage: each.percentage,\r\n        ingredient: each.ingredient,\r\n        level: each.length,\r\n        bonding: 0,\r\n        str: 0,\r\n        int: 0,\r\n        spd: 0,\r\n        res: 0,\r\n        def: 0,\r\n        with: \"\"\r\n      });\r\n    }\r\n  });\r\n  \r\n  console.log(\"evolution\", evolution);\r\n  if(evolution.length > 0) {\r\n    // evolution.push(...sup);\r\n    selected[\"up\"] = evolution;\r\n    evolution.forEach(each => {\r\n      getUpEvolutions(all, standard + 1, each);\r\n    });\r\n  }\r\n};\r\n\r\nconst deepCopyAll = () => {\r\n  const all = new Array();\r\n  for (const each of data) {\r\n    all.push(Object.assign({}, each));\r\n  }\r\n\r\n  return all;\r\n};\r\n\r\nconst getEvolutions = (selected) => {\r\n  const standard = getTypeProgression(selected.type);\r\n\r\n  const all = deepCopyAll(data);\r\n\r\n  selected[\"down\"] = [];\r\n  selected[\"down\"] = getDownEvolutions(all, standard, selected);\r\n  clearTempArray();\r\n\r\n  selected[\"up\"] = [];\r\n  // selected[\"up\"] = \r\n  getUpEvolutions(all, standard, selected);\r\n  clearTempArray();\r\n};\r\n\r\nexport default getEvolutions;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}