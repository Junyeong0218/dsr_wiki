{"ast":null,"code":"const getTypeProgression = type => {\n  if (type === \"유년기1\") return 1;\n  if (type === \"유년기2\") return 2;\n  if (type === \"성장기\") return 3;\n  if (type === \"성숙기\") return 4;\n  if (type === \"완전체\") return 5;\n  return 0;\n};\nconst getTypeNameByProgression = progression => {\n  if (progression === 1) return \"유년기1\";\n  if (progression === 2) return \"유년기2\";\n  if (progression === 3) return \"성장기\";\n  if (progression === 4) return \"성숙기\";\n  if (progression === 5) return \"완전체\";\n  return 0;\n};\nconst getDownEvolutions = (all, standard, selected) => {\n  console.log(\"standard\", standard);\n  const evolution = new Array();\n  for (let i = standard; i > 1; i--) {\n    const typeName = getTypeNameByProgression(i - 1);\n    all.filter(each => each.type === typeName && each.from === selected.from).forEach(each => {\n      const sub = getDownEvolutions(standard - 1, each);\n      each['down'] = sub;\n      evolution.push(each);\n    });\n    // currentData = currentData.filter((row) => row[3] === name);\n    // currentData.forEach((each) => {\n    //   const sub = getDigimonDownEvolution(progression - 1, each[0]);\n\n    //   evolution.push({\n    //     name: each[0],\n    //     type: each[1],\n    //     method: each[2],\n    //     percentage: each[4],\n    //     ingredient: each[5],\n    //     level: each[6],\n    //     bonding: each[7],\n    //     str: each[8],\n    //     int: each[9],\n    //     spd: each[10],\n    //     res: each[11],\n    //     def: each[12],\n    //     _with: each[13],\n    //     down: sub,\n    //   });\n    // });\n\n    return evolution.length !== 0 ? evolution : null;\n  }\n};\nconst getEvolutions = (all, selected) => {\n  const standard = getTypeProgression(selected.type);\n  selected[\"down\"] = [];\n  selected[\"down\"] = getDownEvolutions(all, standard, selected);\n  // selected['up'] = [];\n  // selected['up'] = getUpEvolutions(all, standard, selected);\n};\n\nexport default getEvolutions;","map":{"version":3,"names":["getTypeProgression","type","getTypeNameByProgression","progression","getDownEvolutions","all","standard","selected","console","log","evolution","Array","i","typeName","filter","each","from","forEach","sub","push","length","getEvolutions"],"sources":["C:/Users/JunYeong/Desktop/workspace/dsr_wiki/src/functions/getEvolutions.js"],"sourcesContent":["const getTypeProgression = (type) => {\r\n  if (type === \"유년기1\") return 1;\r\n  if (type === \"유년기2\") return 2;\r\n  if (type === \"성장기\") return 3;\r\n  if (type === \"성숙기\") return 4;\r\n  if (type === \"완전체\") return 5;\r\n\r\n  return 0;\r\n};\r\n\r\nconst getTypeNameByProgression = (progression) => {\r\n    if (progression === 1) return \"유년기1\";\r\n    if (progression === 2) return \"유년기2\";\r\n    if (progression === 3) return \"성장기\";\r\n    if (progression === 4) return \"성숙기\";\r\n    if (progression === 5) return \"완전체\";\r\n  \r\n    return 0;\r\n  };\r\n\r\nconst getDownEvolutions = (all, standard, selected) => {\r\n    console.log(\"standard\", standard);\r\n  const evolution = new Array();\r\n  for (let i = standard; i > 1; i--) {\r\n    const typeName = getTypeNameByProgression(i - 1);\r\n    all.filter(each => each.type === typeName && each.from === selected.from)\r\n        .forEach(each => {\r\n        const sub = getDownEvolutions(standard - 1, each);\r\n\r\n        each['down'] = sub;\r\n        evolution.push(each);\r\n    });\r\n    // currentData = currentData.filter((row) => row[3] === name);\r\n    // currentData.forEach((each) => {\r\n    //   const sub = getDigimonDownEvolution(progression - 1, each[0]);\r\n\r\n    //   evolution.push({\r\n    //     name: each[0],\r\n    //     type: each[1],\r\n    //     method: each[2],\r\n    //     percentage: each[4],\r\n    //     ingredient: each[5],\r\n    //     level: each[6],\r\n    //     bonding: each[7],\r\n    //     str: each[8],\r\n    //     int: each[9],\r\n    //     spd: each[10],\r\n    //     res: each[11],\r\n    //     def: each[12],\r\n    //     _with: each[13],\r\n    //     down: sub,\r\n    //   });\r\n    // });\r\n\r\n    return evolution.length !== 0 ? evolution : null;\r\n  }\r\n};\r\n\r\nconst getEvolutions = (all, selected) => {\r\n  const standard = getTypeProgression(selected.type);\r\n\r\n  selected[\"down\"] = [];\r\n  selected[\"down\"] = getDownEvolutions(all, standard, selected);\r\n  // selected['up'] = [];\r\n  // selected['up'] = getUpEvolutions(all, standard, selected);\r\n};\r\n\r\nexport default getEvolutions;\r\n"],"mappings":"AAAA,MAAMA,kBAAkB,GAAIC,IAAI,IAAK;EACnC,IAAIA,IAAI,KAAK,MAAM,EAAE,OAAO,CAAC;EAC7B,IAAIA,IAAI,KAAK,MAAM,EAAE,OAAO,CAAC;EAC7B,IAAIA,IAAI,KAAK,KAAK,EAAE,OAAO,CAAC;EAC5B,IAAIA,IAAI,KAAK,KAAK,EAAE,OAAO,CAAC;EAC5B,IAAIA,IAAI,KAAK,KAAK,EAAE,OAAO,CAAC;EAE5B,OAAO,CAAC;AACV,CAAC;AAED,MAAMC,wBAAwB,GAAIC,WAAW,IAAK;EAC9C,IAAIA,WAAW,KAAK,CAAC,EAAE,OAAO,MAAM;EACpC,IAAIA,WAAW,KAAK,CAAC,EAAE,OAAO,MAAM;EACpC,IAAIA,WAAW,KAAK,CAAC,EAAE,OAAO,KAAK;EACnC,IAAIA,WAAW,KAAK,CAAC,EAAE,OAAO,KAAK;EACnC,IAAIA,WAAW,KAAK,CAAC,EAAE,OAAO,KAAK;EAEnC,OAAO,CAAC;AACV,CAAC;AAEH,MAAMC,iBAAiB,GAAGA,CAACC,GAAG,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;EACnDC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEH,QAAQ,CAAC;EACnC,MAAMI,SAAS,GAAG,IAAIC,KAAK,CAAC,CAAC;EAC7B,KAAK,IAAIC,CAAC,GAAGN,QAAQ,EAAEM,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACjC,MAAMC,QAAQ,GAAGX,wBAAwB,CAACU,CAAC,GAAG,CAAC,CAAC;IAChDP,GAAG,CAACS,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACd,IAAI,KAAKY,QAAQ,IAAIE,IAAI,CAACC,IAAI,KAAKT,QAAQ,CAACS,IAAI,CAAC,CACpEC,OAAO,CAACF,IAAI,IAAI;MACjB,MAAMG,GAAG,GAAGd,iBAAiB,CAACE,QAAQ,GAAG,CAAC,EAAES,IAAI,CAAC;MAEjDA,IAAI,CAAC,MAAM,CAAC,GAAGG,GAAG;MAClBR,SAAS,CAACS,IAAI,CAACJ,IAAI,CAAC;IACxB,CAAC,CAAC;IACF;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,OAAOL,SAAS,CAACU,MAAM,KAAK,CAAC,GAAGV,SAAS,GAAG,IAAI;EAClD;AACF,CAAC;AAED,MAAMW,aAAa,GAAGA,CAAChB,GAAG,EAAEE,QAAQ,KAAK;EACvC,MAAMD,QAAQ,GAAGN,kBAAkB,CAACO,QAAQ,CAACN,IAAI,CAAC;EAElDM,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE;EACrBA,QAAQ,CAAC,MAAM,CAAC,GAAGH,iBAAiB,CAACC,GAAG,EAAEC,QAAQ,EAAEC,QAAQ,CAAC;EAC7D;EACA;AACF,CAAC;;AAED,eAAec,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}